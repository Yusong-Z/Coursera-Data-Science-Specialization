print(“hello world”)
print("hello world")
print("hello world"")
print("hello world")
1+1
print("hello world")
install.packages(unique(pkgs))
pkgs <- c(
"assertthat",
"backports", "base64enc", "BH", "bindr", "bindrcpp", "bookdown", "broom",
"callr", "cellranger", "cli", "clipr", "clorspace", "crayon", "curl",
"DBI", "dbplyr", "dichromat", "digest", "dplyr",
"evaluate",
"forcats",
"ggplot2", "glue", "gtable",
"haven", "highr", "hms", "htmltools", "httr",
"jsonlite",
"knitr",
"labeling", "lazyeval", "lubridate",
"magrittr", "markdown", "microbenchmark", "mime", "mnormt", "modelr", "munsell",
"openssl",
"pillar", "pkgconfig", "plogr", "plyr", "psych", "purr",
"R6", "RColorBrewer", "Rcpp", "readr", "readxl",
"rematch", "reprex", "reshape2", "rlang", "rmarkdown",
"rprojroot", "rstudioapi", "rvest",
"scales", "selectr", "stringi", "stringr",
"tibble", "tidyr", "tidyselect", "tidyverse",
"utf8",
"viridisLite",
"whisker",
"xml2", "xtable",
"yaml"
)
install.packages(unique(pkgs))
getwd()
setwd("D:/Using Software/R/wd")
getwd()
ls()
1+2
1+1
1+2
getwd()
x <- list(adfdfd = 1:5)
x$a
getwd()
x$b
x$d
x$ad
x <- c(4, "a", TRUE)
x
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x[[2:3]]
class(x[[2]])
class(x[[1]])
x <- list(2, "a", "b", TRUE)
y <- x[[2]]
class(y)
y[1]
x <- 1:4
y <- 2:3
x+y
x <- 1:5
y <- 2:3
x+y
x <- c(3, 5, 1, 10, 12, 6)
x[x<6] == 0
x
x <- c(3, 5, 1, 10, 12, 6)
x[x<6] <- 0
x
x <- c(3, 5, 1, 10, 12, 6)
x[x %in% 1:5] <- 0
x
hw1 <- read.csv("hw1_data.csv")
View(hw1)
hw1[47, ]
hw1 <- read.csv("hw1_data.csv")
good <- complete.cases(hw1)
good
hw1 <- read.csv("hw1_data.csv")
col <- hw1[, 1]
bad <- is.na(col)
len(col)-len(col[!bad])
hw1 <- read.csv("hw1_data.csv")
col <- hw1[, 1]
bad <- is.na(col)
length(col)-length(col[!bad])
col <- hw1[, 2]
bad <- is.na(col)
length(col)-length(col[!bad])
col <- hw1[3]
bad <- is.na(col)
length(col)-length(col[!bad])
length(col)
col <- hw1[3]
bad <- is.na(col)
length(col)
col
length(col)
col <- hw1[, 3]
bad <- is.na(col)
length(col)
length(col)-length(col[!bad])
col <- hw1[, 1]
bad <- is.na(col)
length(col)-length(col[!bad])
col <- hw1[, 2]
bad <- is.na(col)
length(col)-length(col[!bad])
col <- hw1[, 3]
bad <- is.na(col)
length(col)-length(col[!bad])
col <- hw1[, 4]
bad <- is.na(col)
length(col)-length(col[!bad])
col <- hw1[, 5]
bad <- is.na(col)
length(col)-length(col[!bad])
col <- hw1[, 6]
bad <- is.na(col)
length(col)-length(col[!bad])
col <- hw1[, 1]
bad <- is.na(col)
length(col)-length(col[!bad])
hw1 <- read.csv("hw1_data.csv")
col <- hw1[, 1]
View(hw1)
col <- hw1[, 1]
bad <- is.na(col)
mean(col[!bad])
data <- hw1[hw1$Ozone > 31, ]
data
View(data)
data <- complete.cases(hw1)
data <- data[data$Ozone > 31, ]
data <- complete.cases(hw1)
data1 <- data[data$Ozone > 31, ]
data <- complete.cases(hw1)
data
hw1[data]
View(hw1)
data <- hw1[hw1$Ozone > 31, ]
data <- data[data$Temp > 90, ]
View(data)
data <- hw1[hw1$Ozone > 31, ]
data <- data[data$Temp > 90, ]
good <- complete.cases(data)
data[good, ]
View(data)
mean(data[good, ][Solar.R])
mean(data[good, ][, Solar.R])
data1 <- data[good, ]
data <- hw1[hw1$Ozone > 31, ]
data <- data[data$Temp > 90, ]
good <- complete.cases(data)
data1 <- data[good, ]
View(data1)
mean(data1[, "Solar.R"])
mean(data[good, ][, "Solar.R"])
View(data)
View(hw1)
data <- hw1[hw1$Month == 6]
data
View(data)
data <- hw1[hw1$Month == 6, ]
data
View(data)
mean(data[, "Temp"])
data <- hw1[hw1$Month == 5, ]
max(data[, "Ozone"])
data <- hw1[hw1$Month == 5, ]
oz <- data[, "Ozone"]
oz
data <- hw1[hw1$Month == 5, ]
oz <- data[, "Ozone"]
bad <- is.na(oz)
max(oz[!bad])
x<- 1:4
y<-2:3
x+y
x <- 4
class(x)
x<-1:4
y<-2
x+y
class(x+y)
x<-1:4
y<-1:2
class(x+y)
hw1 <- read.csv("hw1_data.csv")
View(hw1)
col = hw1[, "Ozone"]
col
View(hw1)
col <- hw1[, "Ozone"]
bad <- is.na(col)
mean(col[!bad])
data <- hw1[hw1$Ozone > 31, ]
data <- data[data$Temp > 90, ]
good <- complete.cases(data)
mean(data[good, ][, "Solar.R"])
data <- hw1[hw1$Month == 6, ]
mean(data[, "Temp"])
x <- c("a", "b", "c", "d")
seq_along(x)
install.packages("datasets")
install.packages("datasets")
library(datasets)
data(iris)
force(iris)
View(iris)
class(iris)
s <- split(iris, iris$Species)
s
s <- split(iris, iris$Species)
lapply(s, function(x) { colMeans(x[, "Sepal.Length"]) } )
str(s)
lapply(s, function(x) { colMeans(x[, "Sepal.Length"]) } )
lapply(s, function(x) { colMeans(x[, c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")]) } )
data(mtcars)
force(mtcars)
View(mtcars)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$hp, mtcars$cyl), mean)
vec[3] - vec[1]
vec <- sapply(split(mtcars$hp, mtcars$cyl), mean)
vec[3] - vec[1]
# question 5
debug(ls)
ls()
debug(ls)
ls()
setwd("C:/Users/98269/Desktop/R/R Programming/week4")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
best <- function(state, OutcomeType) {
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states  <- unique(outcome[, 7])
types   <- c("heart attack", "heart failure", "pneumonia")
if( state %in% states == FALSE ) { stop("invalid state") }
else if( OutcomeType %in% types == FALSE ) { stop("invalid outcome") }
if (OutcomeType == types[1]) { data <- split(outcome[, c(2, 11)], outcome[, 7]) }
else if (OutcomeType == types[2]) { data <- split(outcome[, c(2, 17)], outcome[, 7]) }
else { data <- split(outcome[, c(2, 23)], outcome[, 7]) }
df <- data.frame(data[state])
df[, 2] <- as.numeric(df[, 2])
good <- complete.cases(df)
df <- df[good, ]
BestRate <- min( df[, 2], na.rm = TRUE )
BestHospital <- c()
for (i in 1:nrow(df)) {
if (  df[i, ][, 2] == BestRate ) { BestHospital <- append(BestHospital, df[i, ][, 1] ) }
}
BestHospital <- sort(BestHospital)
BestHospital[1]
}
rankhospital <- function(state, OutcomeType, num = "best") {
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states  <- unique(outcome[, 7])
types   <- c("heart attack", "heart failure", "pneumonia")
if( state %in% states == FALSE ) { stop("invalid state") }
else if( OutcomeType %in% types == FALSE ) { stop("invalid outcome") }
if (OutcomeType == types[1]) { data <- split(outcome[, c(2, 11)], outcome[, 7]) }
else if (OutcomeType == types[2]) { data <- split(outcome[, c(2, 17)], outcome[, 7]) }
else { data <- split(outcome[, c(2, 23)], outcome[, 7]) }
df <- data.frame(data[state])
df[, 2] <- as.numeric(df[, 2])
good <- complete.cases(df)
df <- df[good, ]
df <- df[order(df[, 2], df[, 1]), ]
df$rank <- 1:nrow(df)
result <- "NA"
if (num == "best") {num <- 1}
else if (num == "worst") (num <- max(df$rank) )
for (i in df$rank) {
if ( df[i, ][, 3] == num ) {
result <- df[i, ][, 1]
}
}
result
}
rankall <- function(OutcomeType, num = "best") {
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
types   <- c("heart attack", "heart failure", "pneumonia")
if( OutcomeType %in% types == FALSE ) { stop("invalid outcome") }
states    <- unique(outcome[, 7])
hospitals <- c()
for (i in states) {
hospitals <- append(hospitals, rankhospital(i, OutcomeType, num))
}
table <- cbind(hospitals, states)
table <- table[order(table[, 2]), ]
table
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
best("SC", "heart attack")
# 2
best("NY", "pneumonia")
# 3
best("AK", "pneumonia")
# 4
rankhospital("NC", "heart attack", "worst")
# 5
rankhospital("WA", "heart attack", 7)
# 6
rankhospital("TX", "pneumonia", 10)
# 7
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
View(r)
r <- rankall("pneumonia", "worst")
View(r)
r <- rankall("heart failure", 10)
View(r)
